# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S9jZeSxrq-ftQMz0P7D_S0BiiIYQYSEI
"""

import argparse
import os
import numpy as np
import matplotlib.pyplot as plt
from data_spring import get_dataset, get_field, get_trajectory

# Your get_args function
def get_args():
    parser = argparse.ArgumentParser(description=None)
    parser.add_argument('--input_dim', default=2, type=int, help='dimensionality of input tensor')
    parser.add_argument('--hidden_dim', default=200, type=int, help='hidden dimension of mlp')
    parser.add_argument('--learn_rate', default=1e-3, type=float, help='learning rate')
    parser.add_argument('--nonlinearity', default='tanh', type=str, help='neural net nonlinearity')
    parser.add_argument('--total_steps', default=2000, type=int, help='number of gradient steps')
    parser.add_argument('--print_every', default=200, type=int, help='number of gradient steps between prints')
    parser.add_argument('--name', default='spring', type=str, help='only one option right now')
    parser.add_argument('--baseline', dest='baseline', action='store_true', help='run baseline or experiment?')
    parser.add_argument('--use_rk4', dest='use_rk4', action='store_true', help='integrate derivative with RK4')
    parser.add_argument('--verbose', dest='verbose', action='store_true', help='verbose?')
    parser.add_argument('--field_type', default='solenoidal', type=str, help='type of vector field to learn')
    parser.add_argument('--seed', default=0, type=int, help='random seed')
    parser.add_argument('--save_dir', default='./models', type=str, help='where to save the trained model')
    return parser.parse_args()

if __name__ == "__main__":
    args = get_args()
    field = get_field(gridsize=15)
    data = get_dataset()

    # Your plotting code here
    fig = plt.figure(figsize=(2.5, 2.5), facecolor='white', dpi=300)
    x, y, dx, dy, t = get_trajectory(radius=0.7, y0=np.array([1, 0]))
    plt.scatter(x, y, c=t, s=14, label='data')
    plt.quiver(field['x'][:, 0], field['x'][:, 1], field['dx'][:, 0], field['dx'][:, 1],
               cmap='gray_r', color=(.5, .5, .5))
    plt.xlabel("$x$", fontsize=14)
    plt.ylabel("$\\frac{dx}{dt}$", rotation=0, fontsize=14)
    plt.title("Dynamics")
    plt.legend(loc='upper right')

    plt.tight_layout()

    # Create the directory if it doesn't exist
    os.makedirs(args.save_dir, exist_ok=True)

    # Save the figure
    fig.savefig(os.path.join(args.save_dir, 'spring-task.png'))
    plt.show()

